import { Field, Form, Formik } from 'formik';
import React, { useEffect, useState } from 'react';
import { getAuth, setAuth } from '../../utils/manageUser';
import { PencilAltIcon } from '@heroicons/react/solid';
import toast, { Toaster } from 'react-hot-toast';
import { getOrders } from '../../services/orders';
import Head from 'next/head';
import Link from 'next/link';
import moment from 'moment/moment';
import { JEWELLERIES, PRODUCTS } from '../../constants/root';
import { updateCustomer } from '../../services/auth';
import * as Yup from 'yup';

const schema = Yup.object().shape({
  firstName: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!'),
  lastName: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!'),
  email: Yup.string().email().min(2, 'Too Short!').max(50, 'Too Long!'),
  number: Yup.string().min(2, 'Too Short!').max(10, 'Too Long!'),
  country: Yup.string().min(2, 'Too Short!').max(20, 'Too Long!'),
  password: Yup.string().min(
    8,
    'Password is too short - should be 8 chars minimum.'
  ),
});

const Profile = () => {
  const [user, setUser] = useState();
  const [isEdit, setIsEdit] = useState(false);
  const [orders, setOrders] = useState([]);
  const [initialState, setInitialState] = useState({
    firstName: '',
    lastName: '',
    email: '',
    number: '',
    country: '',
  });

  const handleSubmit = async (values) => {
    try {
      const res = await updateCustomer(values.id, values);
      await setAuth(res);
      fetchUserDet();
      toast.success('User details updated successfully!');
    } catch (error) {
      toast.error('Something went wrong!');
      console.log(error);
    }
  };

  const fetchUserOrders = async () => {
    try {
      const data = await getOrders(initialState.id);
      setOrders(data);
    } catch (error) {
      console.log(error);
    }
  };

  const fetchUserDet = () => {
    const user = getAuth();
    setUser(user);
    setInitialState({
      id: user._id,
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      password: '',
      number: user.phone,
      country: user.country,
    });
  };

  useEffect(() => {
    fetchUserDet();
  }, []);

  useEffect(() => {
    if (initialState.id) {
      fetchUserOrders();
    }
  }, [initialState]);

  return (
    <>
      <Head>
        <title>The Ramya Boutique</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <div className="max-w-screen-lg px-5 mx-auto my-20 md:px-20 xl:px-0 2xl:max-w-screen-xl">
        <Toaster />
        <div className="pb-5 text-center border-b-2">
          <h5 className="text-lg font-semibold text-gray-800">
            Hi{' '}
            <span>
              {user?.firstName} {user?.lastName}
            </span>
          </h5>
        </div>
        <div className="relative py-5 border-b-2 ">
          {isEdit ? (
            <Formik
              initialValues={initialState}
              validationSchema={schema}
              enableReinitialize
              validateOnChange={false}
              onSubmit={(values, actions) => {
                handleSubmit(values);
                actions.setSubmitting(false);
              }}
            >
              {({ values, errors, touched, isSubmitting }) => (
                <Form>
                  <div className="w-[70%]">
                    <div className=" lg:col-span-3 lg:pr-20">
                      <p>Update your information</p>

                      <div className="grid grid-cols-2 gap-4 mt-4 ">
                        <div className="w-full">
                          <Field
                            placeholder="First Name"
                            className="w-full px-4 py-2 border rounded-full focus:outline-none"
                            name="firstName"
                          />
                          {errors.firstName && touched.firstName ? (
                            <p className="pl-4 text-sm text-red-500">
                              {errors.firstName}
                            </p>
                          ) : null}
                        </div>
                        <div className="w-full">
                          <Field
                            placeholder="Last Name"
                            className="w-full px-4 py-2 border rounded-full focus:outline-none"
                            name="lastName"
                          />
                          {errors.lastName && (
                            <p className="pl-4 text-sm text-red-500">
                              {errors.lastName}
                            </p>
                          )}
                        </div>
                        <div className="w-full">
                          <Field
                            placeholder="Email"
                            className="w-full px-4 py-2 border rounded-full focus:outline-none"
                            name="email"
                          />
                          {errors.email && (
                            <p className="pl-4 text-sm text-red-500">
                              {errors.email}
                            </p>
                          )}
                        </div>
                        <div className="w-full">
                          <Field
                            placeholder="Password"
                            className="w-full px-4 py-2 border rounded-full focus:outline-none"
                            name="password"
                          />
                          {errors.password && (
                            <p className="pl-4 text-sm text-red-500">
                              {errors.password}
                            </p>
                          )}
                        </div>
                        <div className="w-full">
                          <Field
                            placeholder="Phone"
                            className="w-full px-4 py-2 border rounded-full focus:outline-none"
                            name="number"
                          />
                          {errors.number && (
                            <p className="pl-4 text-sm text-red-500">
                              {errors.number}
                            </p>
                          )}
                        </div>
                        <div className="w-full">
                          <Field
                            placeholder="Country"
                            className="w-full px-4 py-2 border rounded-full focus:outline-none"
                            name="country"
                          />
                          {errors.country && (
                            <p className="pl-4 text-sm text-red-500">
                              {errors.country}
                            </p>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center gap-2 mt-4">
                    <button
                      type="submit"
                      disabled={isSubmitting}
                      className="px-8 py-2 text-sm font-bold text-black uppercase bg-orange-400 rounded-full"
                    >
                      Submit
                    </button>
                  </div>
                </Form>
              )}
            </Formik>
          ) : (
            <div className="flex gap-3 w-[40%]">
              <div className="font-semibold text-gray-500 basis-2/4">
                <p>Email</p>
                <p>Phone</p>
                <p>Country</p>
                <p>Address</p>
              </div>
              <div className="text-gray-700 basis-2/4">
                <p>{user?.email}</p>
                <p>{user?.phone}</p>
                <p>{user?.country}</p>
                <p>
                  {user?.address},{user?.city}
                </p>
              </div>
            </div>
          )}

          <div className="absolute right-0 top-3">
            <PencilAltIcon
              className="w-5 h-5 text-gray-600 cursor-pointer hover:text-gray-800"
              onClick={() => setIsEdit(!isEdit)}
            />
          </div>
        </div>
        <div className="py-5 border-b-2">
          <p>Your recent order details</p>
          <div className="flex flex-col gap-5 mt-4">
            {orders?.length > 0 ? (
              orders
                ?.slice(0)
                .reverse()
                .map((order, i) => (
                  <div key={i} className="p-5 border-2 rounded-lg">
                    <h4 className="text-lg font-bold">Order #{order._id}</h4>
                    <p className="text-sm text-gray-500">
                      {moment(order?.created_at).format('DD/MM/YYYY')}
                    </p>
                    <div className="mt-5 overflow-x-auto">
                      <table className="w-full">
                        <thead className="text-left">
                          <tr className="border-t border-b">
                            <th className="py-2 pr-5 w-52">Product Code</th>
                            <th className="py-2 pr-5 w-52">Product Name</th>
                            <th className="py-2 pr-5 w-52">Quantity</th>
                            {/* <th className="py-2 pr-5 w-52">Total</th> */}
                          </tr>
                        </thead>
                        <tbody>
                          {order.jewelleryDetails?.map((product, i) => (
                            <tr key={i} className="align-top">
                              <td className="py-2 pr-5">{product._id}</td>
                              <td className="py-2 pr-5">
                                {product?.productName}
                              </td>

                              <td className="py-2 pr-5">
                                x {product?.quantity}
                              </td>
                              {/* <td className="py-2 pr-5">50 USD</td> */}
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                ))
            ) : (
              <div className="flex flex-col items-center justify-center py-5">
                <p className="text-center">You don&apos;t have any orders!</p>
                <Link href={JEWELLERIES}>
                  <a className="px-8 py-2 mt-4 text-sm font-bold text-black uppercase bg-white border rounded-full">
                    Start shopping
                  </a>
                </Link>
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default Profile;
Profile.auth = true;
