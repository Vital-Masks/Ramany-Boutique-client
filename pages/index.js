import { useState, useEffect, useContext } from "react";
import Head from "next/head";

import Banner from "../components/Views/Banner";
import CardSection from "../components/Views/CardSection";
import CategoryCard from "../components/Views/CategoryCard";

import { getRandom } from "../utils/getRandom";
import { ProductContext } from '../context/productContext';
import { CategoryContext } from "../context/categoryContext";

export default function Home() {
  const [isLoading, setIsLoading] = useState(false);
  const [products, setProducts] = useState([]);
  const [types, setTypes] = useState([])

  const { categories: categoriesState } = useContext(CategoryContext);
  const { products: productsState } = useContext(ProductContext);

  useEffect(() => {
    setIsLoading(true);
    if (productsState) {
      setProducts(getRandom(productsState, 4));
    }
    setIsLoading(false);
  }, [productsState]);

  useEffect(() => {
    if (categoriesState) {
      const grouped = categoriesState?.reduce((cat, curr) => {
        if (!cat[curr.categoryType]) cat[curr.categoryType] = []; //If this type wasn't previously stored
        cat[curr.categoryType].push(curr);
        return cat;
      }, {});

      if (grouped) {
        setTypes(Object.keys(grouped))
      }
    }
  }, [categoriesState])

  return (
    <div className="relative h-full">
      <Head>
        <title>Ramany Boutique</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      {/* Banner Section */}
      <Banner />

      {/* Products Section */}
      <CardSection products={products} loading={isLoading} />

      {/* Category Type Section */}
      <div className="px-5 md:px-20 xl:px-0 max-w-screen-lg 2xl:max-w-screen-xl mx-auto my-20 flex gap-3 overflow-x-scroll lg:overflow-hidden">
        {types?.map((categoryType, index) => (
          <CategoryCard key={index} size={index === 0 ? "large" : "small"} title={categoryType} />
        ))}
      </div>

      {/* Products Section */}
      <CardSection products={products} loading={isLoading} />
    </div>
  );
}
